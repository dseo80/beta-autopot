Gui, 4:Add, Edit, Disabled vPanelSocialvar  x140 y%ypos% w150, Not In Game or Broken
ypos += 25
Gui, 4:Add, Text, x15 y%ypos% w155, Panel Instance Manager
Gui, 4:Add, Edit, Disabled vPanelInstanceManagervar  x140 y%ypos% w150, Not In Game or Broken
ypos += 25
Gui, 4:Add, Text, x15 y%ypos% w155, In City
Gui, 4:Add, Edit, Disabled vInCityvar  x140 y%ypos% w150, Not In Game or Broken
ypos += 25
Gui, 4:Add, Text, x15 y%ypos% w155, Enemy Name
Gui, 4:Add, Edit, Disabled vEnemyNamevar  x140 y%ypos% w150, Not In Game or Broken
ypos += 25
Gui, 4:Add, Text, x15 y%ypos% w155, Enemy Name 2
Gui, 4:Add, Edit, Disabled vEnemyName2var  x140 y%ypos% w150, Not In Game or Broken
ypos += 25
Gui, 4:Add, Text, x15 y%ypos% w155, Map Name
Gui, 4:Add, Edit, Disabled vMapNamevar  x140 y%ypos% w150, Not In Game or Broken

Gui, 4:Add, GroupBox, x305 y0 w300 h650 , Flasks Data
ypos := 25
Loop, 5
{
   Gui, 4:Add, Text, x315 y%ypos% w155, Flask %A_Index% Type
   Gui, 4:Add, Edit, Disabled vFlask%A_Index%Typevar  x440 y%ypos% w150, Not In Game or Broken
   ypos += 25
   Gui, 4:Add, Text, x315 y%ypos% w155, Flask %A_Index% Charges Current
   Gui, 4:Add, Edit, Disabled vFlask%A_Index%ChargesCurrentvar  x440 y%ypos% w150, Not In Game or Broken
   ypos += 25
   Gui, 4:Add, Text, x315 y%ypos% w155, Flask %A_Index% Charges Per Use
   Gui, 4:Add, Edit, Disabled vFlask%A_Index%ChargesPerUsevar  x440 y%ypos% w150, Not In Game or Broken
   ypos += 25
   Gui, 4:Add, Text, x315 y%ypos% w155, Flask %A_Index% Mod 1
   Gui, 4:Add, Edit, Disabled vFlask%A_Index%Mod1var  x440 y%ypos% w150, Not In Game or Broken
   ypos += 25
   Gui, 4:Add, Text, x315 y%ypos% w155, Flask %A_Index% Mod 2
   Gui, 4:Add, Edit, Disabled vFlask%A_Index%Mod2var  x440 y%ypos% w150, Not In Game or Broken
   ypos += 25
}

Gui, 4:Add, GroupBox, x605 y0 w300 h650 , Buff Data
ypos := 25
Gui, 4:Add, Text, x615 y%ypos% w155, Buff Amount
Gui, 4:Add, Edit, Disabled vBuffAmountvar  x740 y%ypos% w150, Not In Game or Broken
ypos += 25
Loop, 8
{
   Gui, 4:Add, Text, x615 y%ypos% w155, Buff %A_Index% Name
   Gui, 4:Add, Edit, Disabled vBuff%A_Index%Namevar  x740 y%ypos% w150, Not In Game or Broken
   ypos += 25
   Gui, 4:Add, Text, x615 y%ypos% w155, Buff %A_Index% Charges
   Gui, 4:Add, Edit, Disabled vBuff%A_Index%Chargesvar  x740 y%ypos% w150, Not In Game or Broken
   ypos += 25
   Gui, 4:Add, Text, x615 y%ypos% w155, Buff %A_Index% Timer
   Gui, 4:Add, Edit, Disabled vBuff%A_Index%Timervar  x740 y%ypos% w150, Not In Game or Broken
   ypos += 25
}

;---------------------DEBUG WINDOW----------------------------
;-------GUI-----------------GUI-----------------GUI-----------------GUI-----------------GUI----------


;-------START VARIABLES-----------------START VARIABLES-----------------START VARIABLES--------------

SetBatchLines, -1
DetectHiddenWindows, On

If not A_IsAdmin
{
   TrayTip, Admin Required, Seems that you are not running this program as Admin`, it might not work properlly., 5
}

cliname=Path of Exile
cliexe=PathOfExile.exe
AutoFlaskWatchdogPeriod:=20 ;milliseconds, time to have script recheck Life/mana/flasks availability more often/increase chances of getting saved from death in time, increase this If fps drop.
lagCompensation:=50

ResyncTimer:= A_TickCount
RemainingTimer:= A_TickCount
ChatStatusTimer:= A_TickCount+99999999999
TradeTimer:= 0
TradeChannel:= 0
tradechat:= 0
TradeStep:= 3
TradeSpamTimer:= 3
ShiftDownOn:=0
ChatCheckTimer:= 1
10secsTimer:=A_TickCount-10000
20secsTimer:=A_TickCount-20000
PanickedTimer:=40
LastHP:=0
LastES:=0
FlaskOnFrozen:=1
FlaskOnShocked:=1
FlaskOnIgnited:=1

ConfigPath = %A_MyDocuments%
ConfigPath .= "\My" . A_Space . "Games\Path" . A_Space . "of" . A_Space . "Exile\production_Config.ini"

autoQuitPauseBeforeClick:=100
autoQuitSoftToleranceBeforeKill:=2000 ; try to quit to loginscreen at most milliseconds before killing game window(in case we can't quit by clicking menu option for some reason)

PlayerConfig:={}

PlayerConfig["Default"]:={RemCorruptedBloodCharges:RemoveCorruptedBloodCharges,RemAilmentsTimer:RemoveAilmentsTimer,QuickSilverTimer:QuickSilverMovementTimer*100, minLifeRatioToInstant: minLifePercentToSpam/100, IflaskDelay: InstantFlaskDelay,minLifeRatioToDrink: minLifePercentToDrink/100, minManaRatioToDrink: minManaPercentToDrink/100, minManaToDrink: minManaToDrinkPot, minLifeRatioToPopElementalResist: minLifePercentToElementalResist/100,minLifeRatioToPopJade: minLifePercentToJade/100, minLifeRatioToQuit: minLifePercentToQuit/100,maxLifeRatioPerHitToQuit: maxLifePercentPerHitToQuit/100,maxEShieldRatioPerHitToQuit: maxESPercentPerHitToQuit/100,minEShieldRatioToQuit: minESPercentToQuit/100, minEShieldRatioToPopElementalResist: minESPercentToElementalResist/100, minEShieldRatioToPopJade: minESPercentToJade/100}

PlayerConfig["Default"].FlaskConfig:=[]

WindowQueuedFlaskEffects:=[] ;keyed by "%hwnd%%CurrPid%", hpQueueEndtime, manaQueueEndtime

basePtrAoBArray:=[0x84,0xC9,0x56,0x0F,0x94,0xC1,0x84]
basePtrAobOffset:=-0x09

WindowBasicsCache:=[] ; keyed by "%hwnd%%CurrPid%", entries are objects with properties processHandle, moduleBase, moduleSize, baseFramePtr

#Include AutoHotkeyMemoryLib.ahk

OnExit, ExitSub

Loop
{
   Main()
}

;-------START VARIABLES-----------------START VARIABLES-----------------START VARIABLES--------------


;-------MAIN FUNCTIONS-----------------MAIN FUNCTIONS-----------------MAIN FUNCTIONS-----------------

GetWindowBasics(hwnd, byref mB="", byref pH="", byref mS="")
{
   
   global WindowBasicsCache
   global cliexe
   
   WinGet, CurrPid, PID, ahk_id %hwnd%
   
   k="%hwnd%%CurrPid%"
   
   mB:=WindowBasicsCache[k].mBase
   mS:=WindowBasicsCache[k].mSize
   
   If mB=
   {
      WindowBasicsCache[k]:=Object()
      GetModuleInfo(cliexe, CurrPid, mB, mS)
      If (mB="" || mS="")
      {
         MsgBox, Failed to obtain moduleBase or moduleSize for PID %CurrPid%, script will now terminate
         ExitApp
      }      
      WindowBasicsCache[k].mBase:=mB
      WindowBasicsCache[k].mSize:=mS
   }

   pH:=WindowBasicsCache[k].ProcessHandle
   If pH=
   {
      pH:=GetProcessHandle(CurrPid)
      If (pH="" || pH=-1)
      {
         MsgBox, Invalid process handle obtained for PID %CurrPid%, script will now terminate
         ExitApp
      }      
      WindowBasicsCache[k].ProcessHandle:=pH
   }
}

ScanBaseMgrPtr(mBase,pH,moduleSize)
{
   global basePtrAoBArray
   global basePtrAobOffset
   global baseMgrPtr
   aobResult:=AobScan(pH,mBase,moduleSize,basePtrAoBArray)

   If aobResult
   {
      SetFormat, IntegerFast, hex
      baseMgrPtr:=ReadMemUInt(pH,mBase+aobResult+basePtrAobOffset)-mBase
      If (trayNotIfications)
     TrayTip, New Base Pointer Found, baseMgrPtr = %baseMgrPtr%
     IniWrite, %baseMgrPtr% , Config.ini, Config, baseMgrPtr
     GuiControl, , basePtrText, %baseMgrPtr%
     SetFormat, IntegerFast, dec

   }
   Else
   {
      MsgBox, baseMgrPtr not found with AoBScan, script will now terminate
      ExitApp
   }   
}

GetFrameBase(hwnd)
{
   global baseMgrPtr
   global WindowBasicsCache
   global cliname
   global 10secsTimer

   WinGet, CurrPid, PID, ahk_id %hwnd%
   k="%hwnd%%CurrPid%"

   fB:=WindowBasicsCache[k].fBase

   If fB=
   {
   		If (A_TickCount>=10secsTimer+10000)
   		{
	   		IniRead, MD5Hash , Config.ini, Config, MD5Hash, 0
			WinGet FullEXEPath, ProcessPath, %cliname%
			NewMD5Hash:=FileMD5(FullEXEPath)

			If (NewMD5Hash!=MD5Hash)
			{
				IniWrite, 0 , Config.ini, Config, baseMgrPtr
				baseMgrPtr:= 0
				IniWrite, %NewMD5Hash% , Config.ini, Config, MD5Hash
			}
			10secsTimer:=A_TickCount
   		}

		GetWindowBasics(hwnd, mBase, pH, mSize)


      If baseMgrPtr= 0
      {
         ScanBaseMgrPtr(mBase, pH, mSize)
      }

      fB:=GetMultilevelPointer(pH,[mBase+baseMgrPtr,4,0x7C,0x11c])
      WindowBasicsCache[k].fBase:=fB
   }
   return fB
}

GetUiBase(hwnd)
{
   global baseMgrPtr
   global cliname
   global 10secsTimer
   global Offset3
   global Offset4



	If (A_TickCount>=10secsTimer+10000)
	{
		IniRead, MD5Hash , Config.ini, Config, MD5Hash, 0
		WinGet FullEXEPath, ProcessPath, %cliname%
		NewMD5Hash:=FileMD5(FullEXEPath)

		If (NewMD5Hash!=MD5Hash)
		{
			IniWrite, 0 , Config.ini, Config, baseMgrPtr
			baseMgrPtr:= 0
			IniWrite, %NewMD5Hash% , Config.ini, Config, MD5Hash
		}
		10secsTimer:=A_TickCount
	}


	GetWindowBasics(hwnd, mBase, pH, mSize)
      
   If baseMgrPtr= 0
   {
      ScanBaseMgrPtr(mBase, pH, mSize)
   }
      
   FrameBase:=GetFrameBase(hwnd)
   If (FrameBase="" || FrameBase=0)
      return
   uiBase:=GetMultilevelPointer(pH,[FrameBase+Offset3,Offset4,0x48])
   return uiBase
}

ReadClientResolution(hwnd, ByRef w, ByRef h)
{
   global Offset6
   global Offset7

   GetWindowBasics(hwnd,mBase,pH)
   If (mBase!=0 && pH && pH!=-1)
   {
      FrameBase:=GetFrameBase(hwnd)
      w:=ReadMemUInt(pH,FrameBase+Offset6)
      h:=ReadMemUInt(pH,FrameBase+Offset7)
      return true
   }   
}



ReadPlayerStats(hwnd, byRef PlayerStats)
{

      global Offset1:=0x138
      global Offset2:=0x4b8
      global Offset3:=0x13c
      global Offset4:=0x220
      global Offset5:=0x34b4
      global Offset6:=0x1588
      global Offset7:=0x158c
      global Offset8:=0x100
      global Offset9:=0xE4
      global Offset10:=0x12c
      global Offset11:=0x1b8
   
   
   GetWindowBasics(hwnd, mBase, pH)
   fBase:=GetFrameBase(hwnd)
   BaseMgr:=ReadMemUInt(pH,mBase+baseMgrPtr)
   PlayerBase:=GetMultilevelPointer(pH,[fBase+Offset1,Offset2])
   ;Config:=GetMultilevelPointer(pH,[BaseMgr+0x180,0x108,0x8c])
   ;PlayerStats.ConfigPath:=ReadMemStr(ph,Config+0xa4,255,"UTF-16")
   PlayerMain:=ReadMemUInt(pH,PlayerBase+4)
   PlayerStatsOffset:=ReadMemUInt(pH,PlayerMain+0xC)
   PlayerStats.MaxHP:=ReadMemUInt(pH,PlayerStatsOffset+0x2c)
   PlayerStats.CurrHP:=ReadMemUInt(pH,PlayerStatsOffset+0x30)  
   PlayerStats.ReservedHPFlat:=ReadMemUInt(pH,PlayerStatsOffset+0x38)
   PlayerStats.ReservedHPPercent:=ReadMemUInt(pH,PlayerStatsOffset+0x3c)
   PlayerStats.MaxMana:=ReadMemUInt(pH,PlayerStatsOffset+0x50)
   PlayerStats.ReservedManaFlat:=ReadMemUInt(pH,PlayerStatsOffset+0x5c)
   PlayerStats.ReservedManaPercent:=ReadMemUInt(pH,PlayerStatsOffset+0x60)
   PlayerStats.CurrMana:=ReadMemUInt(pH,PlayerStatsOffset+0x54)
   PlayerStats.MaxEShield:=ReadMemUInt(pH,PlayerStatsOffset+0x74)
   PlayerStats.CurrEShield:=ReadMemUInt(pH,PlayerStatsOffset+0x78)
   PlayerActionIDOffset:=ReadMemUInt(pH,PlayerMain+0x1C)
   PlayerStats.PlayerActionID:=ReadMemUInt(pH,PlayerActionIDOffset+0x70)
   
   BuffListStart:=ReadMemUInt(pH,PlayerStatsOffset+0x94)
   BuffListEnd:=ReadMemUInt(pH,PlayerStatsOffset+0x98)
   BuffAmount:=((BuffListEnd-BuffListStart)/4)
   PlayerStats.BuffAmount:=((BuffListEnd-BuffListStart)/4)
   Loop, %BuffAmount%
   {
      BuffBasePtr:=GetMultilevelPointer(ph,[BuffListStart+((A_Index-1)*4),4])
      BuffNamePtr:=GetMultilevelPointer(ph,[BuffBasePtr+4,0])
      BuffNameStr:=ReadMemStr(ph,BuffNamePtr,70,"UTF-16")
      PlayerStats.BuffName[A_Index]:=BuffNameStr
      BuffCharges:=ReadMemUInt(pH,BuffBasePtr+0x20)
      PlayerStats.BuffCharges[A_Index]:=BuffCharges
      BuffTimer:=ReadMemFloat(pH,BuffBasePtr+0xC)
      PlayerStats.BuffTimer[A_Index]:=BuffTimer
   }


   CheckBase:=GetMultilevelPointer(pH,[fBase+Offset3,Offset4])

   ChatStatusOffset:=GetMultilevelPointer(pH,[CheckBase+Offset9,0x788,0x0])
   PlayerStats.ChatStatus:=ReadMemUInt(pH,ChatStatusOffset+0x7d4)

   PanelInventoryOffset:=ReadMemUInt(pH,CheckBase+Offset8)
   PlayerStats.PanelInventory:=ReadMemUInt(pH,PanelInventoryOffset+0x7d4)
   PanelSocialOffset:=ReadMemUInt(pH,CheckBase+Offset8+0x10)
   PlayerStats.PanelSocial:=ReadMemUInt(pH,PanelSocialOffset+0x7d4)
   PanelSkillTreeOffset:=ReadMemUInt(pH,CheckBase+Offset8+0x14)
   PlayerStats.PanelSkillTree:=ReadMemUInt(pH,PanelSkillTreeOffset+0x7d4)
   PanelWaypointOffset:=ReadMemUInt(pH,CheckBase+Offset8+0x28)
   PlayerStats.PanelWaypoint:=ReadMemUInt(pH,PanelWaypointOffset+0x7d4)
   MouseOnEnemyOffset:=ReadMemUInt(pH,CheckBase+Offset8+0xb4)
   PlayerStats.MouseOnEnemyStatus:=ReadMemUInt(pH,MouseOnEnemyOffset+0x7d4)
   PanelInstanceManagerOffset:=ReadMemUInt(pH,CheckBase+Offset8+0xD0)  ;added by immor
   PlayerStats.PanelInstanceManager:=ReadMemUInt(pH,PanelInstanceManagerOffset+0x7d4) ;added by immor
   InCityOffset:=GetMultilevelPointer(pH,[CheckBase+Offset10,0x708,0x284])
   PlayerStats.InCity:=ReadMemUInt(pH,InCityOffset+0x7d4)
   EnemyNamePtr:=GetMultilevelPointer(ph,[CheckBase+Offset11,0x8fc,0xb68])
   EnemyName:=ReadMemStr(ph,EnemyNamePtr,70,"UTF-16")
   PlayerStats.EnemyName:=EnemyName
   EnemyNamePtr2:=GetMultilevelPointer(ph,[CheckBase+Offset11,0x8fc,0xb00])
   EnemyName2:=ReadMemStr(ph,EnemyNamePtr2+0x32,70,"UTF-16")
   PlayerStats.EnemyName2:=EnemyName2

   MapNameOffset:=GetMultilevelPointer(pH,[fBase+Offset1,0x8,0x4])
   MapName:=ReadMemStr(ph,MapNameOffset,100,"UTF-16")
   PlayerStats.MapName:=MapName
}

ReadFlasksData(hwnd, byRef FlasksData)
{
   GetWindowBasics(hwnd, mBase, pH)
   
   UiBase:=GetUiBase(hwnd)
   
   If (!UiBase) ;not InGame
      return
   
   FlaskInvBase:=GetMultilevelPointer(pH,[UiBase+0x8ec,0x908,0x20])

   Loop, 5
   {
      currFlaskPtr:=ReadMemUInt(pH,FlaskInvBase+(A_Index-1)*4)

      If (currFlaskPtr!=0) ; there's a flask in said slot
      {
         FlasksData[A_Index]:={}

         If A_Index = 1
         {
            IniRead, Slot1Disabled, Config.ini, DisableSlot, DisableSlot1, 0
            If Slot1Disabled = 1
            continue
         }
         Else If A_Index = 2
         {
            IniRead, Slot2Disabled, Config.ini, DisableSlot, DisableSlot2, 0
            If Slot2Disabled = 1
            continue
         }
         Else If A_Index = 3
         {
            IniRead, Slot3Disabled, Config.ini, DisableSlot, DisableSlot3, 0
            If Slot3Disabled = 1
            continue
         }
         Else If A_Index = 4
         {
            IniRead, Slot4Disabled, Config.ini, DisableSlot, DisableSlot4, 0
            If Slot4Disabled = 1
            continue
         }
         Else If A_Index = 5
         {
            IniRead, Slot5Disabled, Config.ini, DisableSlot, DisableSlot5, 0
            If Slot5Disabled = 1
            continue
         }


         FlaskChargesPtr:=GetMultilevelPointer(ph,[currFlaskPtr,4,0x1C,4,4,0xC])
         FlasksData[A_Index].ChargesCurrent:=ReadMemUInt(pH,FlaskChargesPtr+0xC)
         FlasksData[A_Index].ChargesPerUse:=ReadMemUInt(pH,ReadMemUInt(pH,FlaskChargesPtr+8)+0xC)

         FlaskMod1Ptr:=GetMultilevelPointer(ph,[currFlaskPtr,4,0x1C,4,4,0x10,0x68,0x10,0x38])
         FlaskMod1Str:=ReadMemStr(ph,FlaskMod1Ptr,70,"UTF-16")
         FlasksData[A_Index].mod1:=FlaskMod1Str

         FlaskMod2Ptr:=GetMultilevelPointer(ph,[currFlaskPtr,4,0x1C,4,4,0x10,0x68,0x24,0x38])
         FlaskMod2Str:=ReadMemStr(ph,FlaskMod2Ptr,70,"UTF-16")
         FlasksData[A_Index].mod2:=FlaskMod2Str

         If (FlasksData[A_Index].ChargesCurrent < FlasksData[A_Index].ChargesPerUse) ; not enough charges in this flask to use it, don't bother
            continue

         FlaskMetadataPtr:=GetMultilevelPointer(ph,[currFlaskPtr,0,0xC])
         FlaskMetadataStr:=ReadMemStr(ph,FlaskMetadataPtr,70,"UTF-16")
         FlaskTypeStr:=SubStr(FlaskMetadataStr,23)
         FlasksData[A_Index].type:=FlaskTypeStr

         FlaskLocalstatsPtr:=GetMultilevelPointer(ph,[currFlaskPtr,4,0x18,0x1c,0xC])
         
         If InStr(FlaskTypeStr, "FlaskLife")
         {
            FlasksData[A_Index].HPRegAmount:=ReadMemUInt(pH,FlaskLocalstatsPtr+4)
            
            If (InStr(FlasksData[A_Index].mod1,"Bubbling"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/2.35)
            Else If (InStr(FlasksData[A_Index].mod2,"Bubbling"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/2.35)
            Else If (InStr(FlasksData[A_Index].mod1,"Saturated"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/0.67)
            Else If (InStr(FlasksData[A_Index].mod2,"Saturated"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/2.35)
            Else If (InStr(FlasksData[A_Index].mod1,"Catalysed"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/1.5)
            Else If (InStr(FlasksData[A_Index].mod2,"Catalysed"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/1.5)
            Else
            FlasksData[A_Index].EffectDuration:=ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)
         }

         If InStr(FlaskTypeStr, "FlaskMana")
         {
            FlasksData[A_Index].ManaRegAmount:=ReadMemUInt(pH,FlaskLocalstatsPtr+4)

            If (InStr(FlasksData[A_Index].mod1,"Bubbling"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/2.35)
            Else If (InStr(FlasksData[A_Index].mod2,"Bubbling"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/2.35)
            Else If (InStr(FlasksData[A_Index].mod1,"Saturated"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/0.67)
            Else If (InStr(FlasksData[A_Index].mod2,"Saturated"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/0.67)
            Else If (InStr(FlasksData[A_Index].mod1,"Catalysed"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/1.5)
            Else If (InStr(FlasksData[A_Index].mod2,"Catalysed"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/1.5)
            Else
            FlasksData[A_Index].EffectDuration:=ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)

         }
         
         If InStr(FlaskTypeStr, "FlaskHybrid")
         {
            FlasksData[A_Index].HPRegAmount:=ReadMemUInt(pH,FlaskLocalstatsPtr+4)
            FlasksData[A_Index].ManaRegAmount:=ReadMemUInt(pH,FlaskLocalstatsPtr+0xC)
            If (InStr(FlasksData[A_Index].mod1,"Bubbling"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/2.35)
            Else If (InStr(FlasksData[A_Index].mod2,"Bubbling"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/2.35)
            Else If (InStr(FlasksData[A_Index].mod1,"Saturated"))
            FlasksData[A_Index].EffectDuration:=(ReadMemUInt(pH,FlaskLocalstatsPtr+0x14)/0.67)
